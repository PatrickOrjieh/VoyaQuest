@using VoyaQuest.Models.FlightOffersResponse
@inject NavigationManager NavigationManager

<div class="modal">
    <div class="modal-content">
        <span class="close-button" @onclick="OnClose">&times;</span>
        <h2>Booking Form</h2>

        @if (hasErrors)
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
            <div class="form-group">
                <label for="name">Name</label>
                <InputText id="name" class="form-control" @bind-Value="name" />
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="email" />
            </div>

            <button class="btn btn-primary" type="submit">Book Now</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public FlightOffer FlightOffer { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string name;
    private string email;
    private bool hasErrors = false;
    private string errorMessage = string.Empty;

    private void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(email))
        {
            hasErrors = true;
            errorMessage = "Please fill in all required fields.";
        }
        else if (!IsValidEmail(email))
        {
            hasErrors = true;
            errorMessage = "Please enter a valid email address.";
        }
        else
        {
            hasErrors = false;
            errorMessage = string.Empty;
            GenerateItinerary();
        }
    }

    private bool IsValidEmail(string email)
    {
        var trimmedEmail = email.Trim();
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == trimmedEmail;
        }
        catch
        {
            return false;
        }
    }

    private void GenerateItinerary()
    {
        // Logic to generate and download the itinerary
        string itinerary = $"Name: {name}\nEmail: {email}\nFlight: {FlightOffer.itineraries.First().segments.First().carrierCode}";

        // Create a downloadable file for the itinerary
        var bytes = System.Text.Encoding.UTF8.GetBytes(itinerary);
        var base64 = Convert.ToBase64String(bytes);
        var fileName = "itinerary.txt";

        var downloadLink = $"data:application/octet-stream;base64,{base64}";
        NavigationManager.NavigateTo(downloadLink, true);
    }
}