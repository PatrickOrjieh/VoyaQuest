@page "/flight-results"
@using VoyaQuest.Models
@using VoyaQuest.Interfaces
@using VoyaQuest.Models.FlightOffersResponse
@using System.Web
@using VoyaQuest.Enums
@using VoyaQuest.Models.HotelbedsResponse
@using VoyaQuest.Components.Forms
@using VoyaQuest.Utilities
@inject IFlightServiceSearch FlightServiceSearch
@inject IHotelbedsService HotelbedsService
@inject NavigationManager NavigationManager
@inject ICurrencyService CurrencyService
@inject IJSRuntime JSRuntime

<PageTitle>Flight Results</PageTitle>

<div class="container mt-5">
    <div class="flight-summary-section mb-4 p-4 rounded shadow-sm text-white" style="background-color: #ef732a;">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <h2 class="text-white mb-1">Flight Results</h2>
                <p class="text-white">Explore the best options based on your search criteria</p>
            </div>
            <div>
                <span class="badge bg-white text-dark fs-5">@flightOffers?.Count() Offers Available</span>
            </div>
        </div>
        <div class="search-summary">
            <div class="row">
                <div class="col-md-3">
                    <strong>From:</strong> @from
                </div>
                <div class="col-md-3">
                    <strong>To:</strong> @to
                </div>
                <div class="col-md-3">
                    <strong>Trip Type:</strong> @(tripType == "return" ? "Return" : "One Way")
                </div>
                <div class="col-md-3">
                    <strong>Departure Date:</strong> @departureDate?.ToString("MMM dd, yyyy")
                </div>
                @if (tripType == "return")
                {
                    <div class="col-md-3">
                        <strong>Return Date:</strong> @returnDate?.ToString("MMM dd, yyyy")
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="sorting-controls">
        <label for="sortOption">Sort by:</label>
        <select id="sortOption" @onchange="OnSortOptionChanged" class="sort-dropdown">
            <option value="price">Price</option>
            <option value="duration">Duration</option>
        </select>

        <button class="sort-toggle-btn" @onclick="ToggleSortDirection">
            @if (isAscending)
            {
                <i class="fas fa-arrow-up"></i>
                <span>Ascending</span>
            }
            else
            {
                <i class="fas fa-arrow-down"></i>
                <span>Descending</span>
            }
        </button>
    </div>

    <div class="row">
        @if (flightOffers != null && flightOffers.Any())
        {
            @foreach (var flightOffer in paginatedFlightOffers)
            {
                // Get the arrival IATA code from the flight offer
                string arrivalCityIataCode = flightOffer.itineraries.First().segments.Last().arrival.iataCode;

                <div class="col-12 mb-4">
                    <div class="card flight-card shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="flight-info">
                                    @foreach (var itinerary in flightOffer.itineraries)
                                    {
                                        <div class="flight-segment mb-3">
                                            <div class="d-flex align-items-center">
                                                <div class="flight-departure text-center me-3">
                                                    <div class="airport-code">@itinerary.segments.First().departure.iataCode</div>
                                                    <div class="flight-time">Terminal: @itinerary.segments.Last().departure.terminal</div>
                                                    <div class="flight-time">@itinerary.segments.First().departure.at.ToString("HH:mm")</div>
                                                </div>

                                                <div class="flight-line position-relative mx-3">
                                                    <div class="line"></div>
                                                    <i class="fas fa-plane plane-icon position-absolute"></i>
                                                </div>

                                                <div class="flight-arrival text-center ms-3">
                                                    <div class="airport-code">@itinerary.segments.Last().arrival.iataCode</div>
                                                    <div class="flight-time">Terminal: @itinerary.segments.Last().arrival.terminal</div>
                                                    <div class="flight-time">@itinerary.segments.Last().arrival.at.ToString("HH:mm")</div>
                                                </div>

                                                <div class="flight-duration ms-4 text-muted">
                                                    <i class="far fa-clock"></i> @itinerary.duration.Replace("PT", "").ToLower()
                                                </div>
                                            </div>

                                            <div class="additional-details mt-3">
                                                <span><i class="fas fa-plane"></i> Flight: @string.Join(", ", itinerary.segments.Select(s => s.carrierCode + " " + s.number))</span>
                                                <span class="ms-4"><i class="fas fa-suitcase-rolling"></i> Cabin: @flightOffer.travelerPricings.FirstOrDefault()?.fareDetailsBySegment.FirstOrDefault()?.cabin</span>
                                                <span class="ms-4"><i class="fas fa-user"></i> Seats Available: @flightOffer.numberOfBookableSeats</span>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <div class="flight-price text-end">
                                    <h5 class="text-black mb-3">@flightOffer.price.currency @flightOffer.price.total</h5>
                                    <button class="btn btn-pill me-2" @onclick="() => ShowBookingForm(flightOffer)">Book Now</button>
                                    @if (TryGetCityFromEnum(arrivalCityIataCode, out string matchedCity))
                                    {
                                        <button class="btn btn-pill btn-hotel" @onclick="@(() => ShowHotels(matchedCity))">View Hotels</button>
                                    }
                                </div>

                                @* @if (showBookingForm)
                                {
                                    <BookingForm FlightOffer="@selectedFlightOffer" OnClose="CloseBookingForm" />
                                } *@

                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="pagination-controls mt-4">
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="PrevPage" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </button>
                        </li>

                        @for (var i = 1; i <= totalPages; i++)
                        {
                            var pageNumber = i;

                            <li class="page-item @(currentPage == i ? "active" : "")">
                                <button class="page-link" @onclick="@(() => GoToPage(pageNumber))">@i</button>
                            </li>
                        }

                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="NextPage" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>

        }
        else
        {
            <div class="col-12 text-center">
                <div class="alert alert-warning">
                    <h5>No flights available for the selected criteria.</h5>
                    <p>Try adjusting your search or check back later for updated offers.</p>
                </div>
            </div>
        }
    </div>

    @if (showHotels)
    {
        <div class="hotel-modal">
            <div class="modal-content">
                <span class="close-button" @onclick="CloseModal">&times;</span>
                <h2 class="modal-title">Available Hotels</h2>
                <table class="hotel-table">
                    <thead>
                        <tr>
                            <th>Hotel Name</th>
                            <th>City</th>
                            <th>Rating</th>
                            <th>Email</th>
                            <th>Website</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var hotel in filteredHotels)
                        {
                            <tr>
                                <td>@hotel.name?.content</td>
                                <td>@hotel.city?.content</td>
                                <td>
                                    <div class="stars-container">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= Convert.ToInt32(hotel.S2C?.Substring(0, 1)))
                                            {
                                                <i class="fas fa-star star-icon"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star star-icon"></i>
                                            }
                                        }
                                    </div>
                                </td>
                                <td>@hotel.email</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(hotel.web))
                                    {
                                        <a href="@("https://" + hotel.web)" target="_blank" class="visit-hotel-btn">Visit</a>
                                    }
                                    else
                                    {
                                        <span>N/A</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    @if (showBookingForm)
    {
        <div class="booking-modal">
            <div class="booking-modal-content">
                <span class="booking-close-button" @onclick="CloseBookingForm">&times;</span>
                <h2>Booking Form</h2>

                @if (hasErrors)
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                <EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
                    <div class="form-group">
                        <label for="name">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="name" />
                    </div>
                    <div class="form-group">
                        <label for="email">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="email" />
                    </div>

                    <button class="btn btn-primary" type="submit">Book Now</button>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private string from;
    private string to;
    private string tripType;
    private DateTime? departureDate;
    private DateTime? returnDate;
    private int adults;
    private int children;
    private string cabinClass;
    private List<FlightOffer> flightOffers;
    private List<FlightOffer> paginatedFlightOffers;
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 0;
    private List<Hotel> hotels;
    private List<Hotel> filteredHotels = new();
    private bool showHotels = false;
    private bool canGoPrev => currentPage > 1;
    private bool canGoNext => flightOffers.Count > currentPage * pageSize;
    [CascadingParameter] public Currency SelectedCurrency { get; set; }
    private bool showBookingForm = false;
    private FlightOffer selectedFlightOffer;
    private string name;
    private string email;
    private bool hasErrors = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the query parameters from the URL
        var uri = new Uri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);

        from = query["from"];
        to = query["to"];
        tripType = query["tripType"];
        departureDate = DateTime.Parse(query["departureDate"]);
        returnDate = tripType == "return" ? DateTime.Parse(query["returnDate"]) : (DateTime?)null;
        adults = int.Parse(query["adults"]);
        children = int.Parse(query["children"]);
        cabinClass = query["cabinClass"];

        // Create the SearchModel from query parameters
        var searchModel = new SearchModel
            {
                DepartureAirport = from,
                DestinationAirport = to,
                TripType = tripType,
                DepartureDate = departureDate,
                ReturnDate = returnDate,
                TravelDetails = new TravelDetails { AdultCount = adults, ChildCount = children },
                CabinClass = cabinClass
            };

        // Call the API to fetch flight offers based on the search model
        flightOffers = await FlightServiceSearch.SearchFlightsAsync(searchModel);

        //call the API to fetch hotels
        hotels = await HotelbedsService.GetHotelsAsync();

        // Calculate the total number of pages
        totalPages = (int)Math.Ceiling((double)flightOffers.Count / pageSize);

        ApplyPagination();
    }

    private void ApplyPagination()
    {
        paginatedFlightOffers = flightOffers.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            ApplyPagination();
        }
    }

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplyPagination();
        }
    }

    private void GoToPage(int page)
    {
        currentPage = page;
        ApplyPagination();

        StateHasChanged();
    } 

    protected override async Task OnParametersSetAsync()
    {
        // Update flight prices when SelectedCurrency changes
        await UpdateFlightPrices();
    }

    private async Task UpdateFlightPrices()
    {
        foreach (var flightOffer in flightOffers)
        {
            if (double.TryParse(flightOffer.price.total, out double decimalPrice))
            {
                var convertedPrice = await CurrencyService.ConvertAmountAsync(decimalPrice, flightOffer.price.currency, SelectedCurrency.ToString());

                flightOffer.price.total = convertedPrice.ToString("F2");
                flightOffer.price.currency = SelectedCurrency.ToString();
            }
            else
            {
                Console.WriteLine($"Failed to parse price: {flightOffer.price.total}");
            }
        }
        StateHasChanged();
    }

    /// <summary>
    /// This method is used to show hotels based on the selected city
    /// </summary>
    /// <param name="city">The city to filter hotels by</param>
    private void ShowHotels(string city)
    {
        filteredHotels = hotels.Where(h => h.city?.content.ToUpper() == city.ToUpper()).ToList();
        showHotels = true;
    }

    private void CloseModal()
    {
        showHotels = false;
    }

    // Function to get the city from the enum based on the IATA code
    private bool TryGetCityFromEnum(string iataCode, out string cityName)
    {
        cityName = null;

        // Loop through the IataCity enum and check if any enum value ends with the IATA code
        foreach (var city in Enum.GetValues(typeof(IataCity)))
        {
            string enumValue = city.ToString().ToUpper();
            if (enumValue.EndsWith($"_{iataCode.ToUpper()}"))
            {
                // Remove the IATA code  from the enum value to get the city name
                cityName = enumValue.Split('_')[0];
                return true;
            }
        }

        return false;
    }

    private string selectedSortOption = "price";
    private bool isAscending = true;

    // Call this when user changes the sort option
    private void OnSortOptionChanged(ChangeEventArgs e)
    {
        selectedSortOption = e.Value.ToString();
        SortFlights();
    }

    // Toggle sorting direction between ascending and descending
    private void ToggleSortDirection()
    {
        isAscending = !isAscending;
        SortFlights();
    }

    private void SortFlights()
    {
        flightOffers = FlightServiceSearch.SortFlights(flightOffers, selectedSortOption, isAscending);
        ApplyPagination();
        StateHasChanged();
    }

    private void ShowBookingForm(FlightOffer flightOffer)
    {
        selectedFlightOffer = flightOffer;
        showBookingForm = true;
    }

    private void CloseBookingForm()
    {
        showBookingForm = false;
    }

    private void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(email))
        {
            hasErrors = true;
            errorMessage = "Please fill in all required fields.";
        }
        else if (!IsValidEmail(email))
        {
            hasErrors = true;
            errorMessage = "Please enter a valid email address.";
        }
        else
        {
            hasErrors = false;
            errorMessage = string.Empty;
            DownloadItinerary();
            showBookingForm = false;
        }
    }

    private bool IsValidEmail(string email)
    {
        var trimmedEmail = email.Trim();
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == trimmedEmail;
        }
        catch
        {
            return false;
        }
    }

    // private void DownloadItinerary()
    // {
    //     try
    //     {
    //         var pdfContent = FileUtility.GeneratePdfItinerary(name, email, selectedFlightOffer);

    //         if (pdfContent == null)
    //         {
    //             Console.WriteLine("No PDF content returned.");
    //             return;
    //         }

    //         var base64 = Convert.ToBase64String(pdfContent);
    //         var downloadLink = $"data:application/pdf;base64,{base64}";

    //         var fileName = $"FlightItinerary_{selectedFlightOffer.itineraries.First().segments.First().departure.iataCode}_to_{selectedFlightOffer.itineraries.First().segments.Last().arrival.iataCode}.pdf";
    //         Console.WriteLine("Triggering PDF download: " + fileName);

    //         // Triggers the download
    //         NavigationManager.NavigateTo($"{downloadLink}", true);
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine("Error in DownloadItinerary: " + ex.Message);
    //         errorMessage = "An error occurred while downloading the itinerary.";
    //         hasErrors = true;
    //     }
    // }

    /// <summary>
    /// This method is used to download the itinerary as a PDF
    /// </summary>
    /// <returns>Returns the PDF content as a base64 string</returns>
    private async Task DownloadItinerary()
    {
        try
        {
            var pdfContent = FileUtility.GeneratePdfItinerary(name, email, selectedFlightOffer);

            if (pdfContent == null)
            {
                Console.WriteLine("No PDF content returned.");
                return;
            }

            var base64 = Convert.ToBase64String(pdfContent);
            var fileName = $"FlightItinerary_{selectedFlightOffer.itineraries.First().segments.First().departure.iataCode}_to_{selectedFlightOffer.itineraries.First().segments.Last().arrival.iataCode}.pdf";

            // Trigger the file download using JavaScript interop
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", fileName, base64);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error in DownloadItinerary: " + ex.Message);
        }
    }
}
